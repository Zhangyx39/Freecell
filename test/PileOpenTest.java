import org.junit.Test;

import freecell.model.Card;
import freecell.model.CardImpl;
import freecell.model.Open;
import freecell.model.Pile;
import freecell.model.Suit;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * Testing for the Open Pile Class.
 * Test includes:
 * Adding to an Open pile when empty;
 * Adding to an Open pile when not empty;
 */
public class PileOpenTest {

  /**
   * Test adding card of all four colors of values 1-13 to empty Open pile.
   */
  @Test
  public void testOpenPile_EmptyAddSuccess() {
    for (int i = 1; i < 14; i++) {
      for (int j = 0; j < 4; j++) {
        Pile emptyOpen = new Open();
        Card c = new CardImpl(i, Suit.values()[j]);
        assertTrue(emptyOpen.add(c));
        //check Open Pile changed.
        assertEquals(emptyOpen.toString().substring(1), c.toString());
      }
    }
  }

  @Test
  public void testOpenPile_NonEmptyAddFail() {
    Pile nonEmptyOpen = new Open();
    Card original = new CardImpl(3, Suit.HEART);
    nonEmptyOpen.add(original);

    for (int i = 1; i < 14; i++) {
      for (int j = 0; j < 4; j++) {
        Card c = new CardImpl(i, Suit.values()[j]);
        assertFalse(nonEmptyOpen.add(c));
        //check Open Pile never change.
        assertEquals(nonEmptyOpen.toString().substring(1), original.toString());
      }
    }
  }
}
